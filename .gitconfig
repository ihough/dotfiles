[alias]

	# Abbreviations for basic commands.
	br = branch
	c = commit
	d = diff
	co = checkout
	st = status
	cfg = config list

  # Interactively stage changes
  ai = add --interactive

  # Interactively stage hunks of a file
  ap = add --patch

	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --oneline --graph -n 20

	# View the current working tree status using the short format.
	ss = status --short --branch

	# Pull in remote changes for the current repository and all its submodules.
	pull-r = pull --recurse-submodules

	# Clone a repository including all submodules.
	clone-r = clone --recursive

	# Commit staged changes with the following message.
	cm = commit --message

	# Commit all modified or deleted files with following message.
	cam = commit --all --message

	# Switch to a branch, creating it if necessary.
	go = "!git switch \"$1\" 2> /dev/null || git switch -c \"$1\" #"

	# Show last commit.
	last = log -1 HEAD

	# Show verbose output about tags, branches or remotes.
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# Add the currently staged files to the latest commit.
	fixup = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits.
	rebase-n = "!git rebase -i HEAD~$1 #"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!git tag -d \"$1\" && git push origin :refs/tags/\"$1\" && git tag \"$1\" #"

	# Find branches containing commit.
	find-branches = "!git branch -all --contains \"$1\" #"

	# Find tags containing commit.
	find-tags = "!git describe --always --contains \"$1\" #"

	# Find commits by source code.
	find-code = "!git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S\"$1\" #"

	# Find commits by commit message.
	find-messages = "!git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=\"$1\" #"

	# Remove branches that have already been merged with main.
	# a.k.a. â€˜delete merged'
	del-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

  # Stage all whitespace changes (unstages any non-whitespace changes that were already staged)
  add-space = "!git add --all && git diff --cached --ignore-all-space | git apply --cached --reverse"

  # Unstage all non-whitespace changes
  unstage-nonspace = "!git diff --cached --ignore-all-space --ignore-blank-lines | git apply --cached --reverse"

	# Show staged changes.
	diff-staged = diff --cached
	ds = diff-staged

	# Show diff with --color-words.
	diff-cw = diff --color-words
	dcw = diff-cw

	# Unstage changes.
	u = restore --staged
	unstage = restore --staged

	# Reset the previous commit.
	uncommit = reset --soft HEAD^1

	# # Reset the previous work-in-progress commit.
	unwip = "!git rev-list --max-count=1 --format='%s' HEAD | grep -q '^#WIP' && git reset HEAD~1 || echo 'Previous commit was not #WIP'"

	# Show the user email for the current repository.
	whoami = !echo "$(git config user.name): $(git config user.email)"

	# Commit all changes as a work-in-progress.
	wip = "!git add --all; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message '#WIP [skip ci]'"

[apply]

	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[core]

	# Use global `.gitignore` and `.gitattributes` if they exist.
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Force LF line endings.
	eol = LF

  # Track file modes
  fileMode = true

	# Don't clear screen after showing multi-page diff
	pager = less -FX

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color "branch"]

	current = magenta
	local = normal
	remote = cyan
	upstream = green

[color "diff"]

	context = normal
	meta = yellow bold
	frag = cyan  # line info
	# func = blue
	old = red # deletions
	new = green # additions
	# commit = blue
	whitespace = white bold
	oldMoved = red bold
	newMoved = green bold

[color "status"]

	header = normal
	added = green
	changed = red
	untracked = yellow
	branch = magenta
	localBranch = magenta
	remoteBranch = cyan
	unmerged = blue

[diff]

	# Color moved lines of code.
	colorMoved = zebra

	# Detect copies as well as renames.
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C

[include]

	# Include extra file containing user name and email.
	path = ~/.gitconfig.user

[init]

	# Use "main" as default branch name.
	defaultBranch = main

[merge]

	# Include summaries of merged commits in newly created merge commit messages.
	log = true

[push]

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

# URL shorthands

[url "git@github.com:"]
	insteadOf = gh:

[url "git@gitlab.com:"]
	insteadOf = gl:

[url "git@gricad-gitlab.univ-grenoble-alpes.fr"]
	insteadOf = ggl:
